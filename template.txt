openapi: 3.0.0
info:
  version: "2.0.0"
  title: 'API generation using Swagger UI'
  description: 'Demo of Swagger API to generate API'
  termsOfService: https://smartbear.com
  contact:
    name: Pradeep
    email: pradeep@gmail.com
    url: http://www.classpath.io
  license:
    name: Smartbean license
    url: http://smartbear.com/license

servers:

  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/prashdeep/HR_API/1.0.0
  - description: Dev Server
    url: https://dev.api.com/prashdeep/HR_API/1.0.0
  
  - description: Staging server
    url: https://stage.api.com/prashdeep/HR_API/1.0.0
    
paths: 
  /employees: 
    get:
      description: Obtain all the information about the employees
      parameters: 
        - name: bodyLimit
          in: query
          description: The number of employees to be returned
          schema:
            type: integer
            minimum: 10
            maximum: 20
            example: 15
     
        - name: pageLimit
          in: query
          description: The number of pages of employees to be returned
          schema:
            type: integer
            minimum: 1
            maximum: 5
            example: 2
      
      responses:
        200:
          description: Successfull response
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id: 
                      type: integer
                      example: 4
                    employee name:
                      type: string
                      example: Mohan
                    employee title:
                      type: string
                      example: Manager
  
    post:
      description: Creates a new employee in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Employee'
      responses:
        200:
          description: Successfully saved the employee
          
  /employee/{id}:
    get:
      description: Get the employee with the passed in id
      parameters: 
        - in: path
          name: id
          required: true
          description: id of the employee
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: Successfull
          content:
            application/json:
              schema:
                $ref:'#/components/schemas/Employee'
            application/xml:
              schema:
                $ref:'#/components/schemas/Employee'
components:
  schemas:
    Employee:
      description: Employee Object
      properties:
        id: 
          type: integer
          example: 4
        employee name:
          type: string
          example: Mohan
        employee title:
          type: string
          example: Manager

image/png 
application/octet-stream

file upload 
  requestBody:
  content:
    image/png:
      schema:
        type: string
        format: binary

requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                orderId:
                  type: integer
                userId:
                  type: integer
                fileName:
                  type: string
                  format: binary

sending multiple files 
requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: array
                  items:
                    type: string
                    format: binary

HTTP authentication schemes (they use the Authorization header):
    Basic
    Bearer
    API keys in headers, query string or cookies
    Cookie authentication
    OAuth 2
    OpenID Connect Discovery


components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OpenID:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations

example of security scheme

paths:
  /employee:
    get:
      summary: Gets the account billing info
      security:
        - OAuth2: [admin]   # Use OAuth with a different scope
      responses:
        '200':
          description: OK
        '401':
          description: Not authenticated
        '403':
          description: Access token does not have the required scope
  /user:
    get:
      summary: Checks if the server is running
      security: []   # No security
      responses:
        '200':
          description: Server is up and running
        default:
          description: Something is wrong


servers:
  - url: '{protocol}://api.classpath.com'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https

servers:
  - url: https://{environment}.classpath.com/v2
    variables:
      environment:
        default: api    # Production server
        enum:
          - api         # Production server
          - api.dev     # Development server
          - api.staging # Staging server

servers:
  - url: https://{region}.api.classpath.com
    variables:
      region:
        default: mumbai
        enum:
          - us-east
          - us-west
          - us-ap-south-1
          - us-west-1

Media types
    application/json
    application/xml
    application/x-www-form-urlencoded
    multipart/form-data
    text/plain; charset=utf-8
    text/html
    application/pdf
    image/png